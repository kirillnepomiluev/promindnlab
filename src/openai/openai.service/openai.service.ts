import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { TextContentBlock } from 'openai/resources/beta/threads/messages';
import { toFile } from 'openai/uploads';
import * as fs from 'fs/promises';
import * as os from 'os';
import * as path from 'path';
import * as crypto from 'crypto';
// eslint-disable-next-line @typescript-eslint/no-require-imports
const ffmpeg = require('fluent-ffmpeg');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const ffmpegPath = require('ffmpeg-static');
ffmpeg.setFfmpegPath(ffmpegPath);
import { SessionService } from '../../session/session.service';

@Injectable()
export class OpenAiService {
  private readonly openAi: OpenAI;
  private readonly logger = new Logger(OpenAiService.name);
  private threadMap: Map<number, string> = new Map();

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ PNG,
   * —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –¥–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–±—ä—ë–º < 4 MB.
   */
  private async prepareImage(image: Buffer): Promise<Buffer> {
    const tmpDir = os.tmpdir();
    const inputPath = path.join(tmpDir, `${crypto.randomUUID()}.src`);
    const outPath = path.join(tmpDir, `${crypto.randomUUID()}.png`);
    await fs.writeFile(inputPath, image);

    let size = 1024;
    let result: Buffer = image;
    while (size >= 256) {
      await new Promise<void>((resolve, reject) => {
        ffmpeg(inputPath)
          .outputOptions([
            '-vf',
            `scale=${size}:${size}`,
            '-compression_level',
            '9',
          ])
          .toFormat('png')
          .save(outPath)
          .on('end', () => resolve())
          .on('error', (err: Error) => reject(err));
      });
      result = await fs.readFile(outPath);
      if (result.length <= 4 * 1024 * 1024) break;
      size = Math.floor(size / 2);
    }

    await Promise.allSettled([fs.unlink(inputPath), fs.unlink(outPath)]);
    return result;
  }

  constructor(
    private readonly configService: ConfigService,
    private readonly sessionService: SessionService,
  ) {
    const rawKey = this.configService.get<string>('OPENAI_API_KEY_PRO');
    if (!rawKey) {
      throw new Error('–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY_PRO');
    }
    this.logger.debug(`Raw OpenAI API key length: ${rawKey.length}`);
    this.logger.debug(
      `API raw key fragment: ${rawKey.slice(0, 5)}...${rawKey.slice(-5)}`,
    );
    // –£–¥–∞–ª—è–µ–º BOM –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    const key = rawKey.replace(/\s+/g, '').trim();
    this.logger.debug(
      `API key fragment: ${key.slice(0, 5)}...${key.slice(-5)}`,
    );
    this.logger.debug(`Sanitized OpenAI API key length: ${key.length}`);

    const baseURL =
      this.configService.get<string>('OPENAI_BASE_URL_PRO')?.trim() ||
      'https://chat.neurolabtg.ru/v1';

    this.openAi = new OpenAI({
      apiKey: key,
      baseURL,
    });
  }
  async waitForRunCompletion(threadId: string, runId: string) {
    let runStatus = 'in_progress';

    while (runStatus === 'in_progress' || runStatus === 'queued') {
      console.log(`–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run ${runId}...`);
      await new Promise((res) => setTimeout(res, 3000)); // –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

      const run = await this.openAi.beta.threads.runs.retrieve(threadId, runId);
      runStatus = run.status;
    }

    console.log(`Run ${runId} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${runStatus}`);
  }

  async chat(content: string, userId: number) {
    let threadId = await this.sessionService.getSessionId(userId);
    if (threadId) {
      this.threadMap.set(userId, threadId);
    }
    let thread: { id: string };
    const assistantId = 'asst_naDxPxcSCe4YgEW3S7fXf4wd';
    try {
      if (!threadId) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        thread = await this.openAi.beta.threads.create();

        threadId = thread.id;
        this.threadMap.set(userId, threadId);
        await this.sessionService.setSessionId(userId, threadId);
      } else {
        // –ï—Å–ª–∏ —Ç—Ä–µ–¥ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        thread = { id: threadId };
      }
      // === –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π run ===
      const runs = await this.openAi.beta.threads.runs.list(threadId);
      const activeRun = runs.data.find(
        (run) => run.status === 'in_progress' || run.status === 'queued',
      );

      if (activeRun) {
        console.log(
          `–ê–∫—Ç–∏–≤–Ω—ã–π run —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è thread ${threadId}. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...`,
        );
        await this.waitForRunCompletion(threadId, activeRun.id);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥
      await this.openAi.beta.threads.messages.create(thread.id, {
        role: 'user',
        content: content,
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —Ç—Ä–µ–¥—É
      const response = await this.openAi.beta.threads.runs.createAndPoll(
        thread.id,
        {
          assistant_id: assistantId,
        },
      );
      if (response.status === 'completed') {
        // const tokensUsed = response.usage?.total_tokens ?? 0;

        const messages = await this.openAi.beta.threads.messages.list(
          response.thread_id,
        );
        // for (const message of messages.data.reverse()) {
        //   //console.log(`${message.role} > ${message.content[0].text.value}`);
        // }

        const assistantMessage = messages.data[0];
        if (assistantMessage.content[0].type == 'text') {
          const answer: TextContentBlock = assistantMessage.content[0];

          return answer.text.value;
        }
      } else {
        console.log(response.status);
      }

      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ response —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ messages,
      // –≥–¥–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    } catch (error) {
      console.error(error);
      console.log(error);
      return 'ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    }
  }

  async generateImage(prompt: string): Promise<string | Buffer | null> {
    try {
      const { data } = await this.openAi.images.generate({
        model: 'gpt-image-1',
        prompt,
        quality: 'low',
        n: 1,
        size: '1024x1024',
      });
      if (!data || data.length === 0) {
        this.logger.error('Image.generate –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π data', data);
        return null;
      }
      const img = data[0];
      // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π: –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64-JSON
      if ('b64_json' in img && img.b64_json) {
        return Buffer.from(img.b64_json, 'base64');
      }
      // –ù–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
      if ('url' in img && img.url) {
        return img.url;
      }
      this.logger.error('Image data –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ b64_json, –Ω–∏ url', img);
      return null;
    } catch (err: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', err);
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
   * —Å –ø–æ–º–æ—â—å—é endpoint'a createVariation
   */
  async generateImageFromPhoto(image: Buffer): Promise<string | Buffer | null> {
    try {
      const prepared = await this.prepareImage(image);
      const file = await toFile(prepared, 'image.png');
      const { data } = await this.openAi.images.createVariation({
        image: file,
        model: 'dall-e-2',
        n: 1,
        size: '1024x1024',
        response_format: 'b64_json',
      });
      if (!data || data.length === 0) {
        this.logger.error('Image.createVariation –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π data', data);
        return null;
      }
      const img = data[0];
      if ('b64_json' in img && img.b64_json) {
        return Buffer.from(img.b64_json, 'base64');
      }
      if ('url' in img && img.url) {
        return img.url;
      }
      this.logger.error('Image data –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ b64_json, –Ω–∏ url', img);
      return null;
    } catch (err: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', err);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
   */
  async chatWithImage(
    content: string,
    userId: number,
    image: Buffer,
  ): Promise<string> {
    let threadId = await this.sessionService.getSessionId(userId);
    if (threadId) {
      this.threadMap.set(userId, threadId);
    }
    let thread: { id: string };
    const assistantId = 'asst_naDxPxcSCe4YgEW3S7fXf4wd';
    try {
      if (!threadId) {
        thread = await this.openAi.beta.threads.create();
        threadId = thread.id;
        this.threadMap.set(userId, threadId);
        await this.sessionService.setSessionId(userId, threadId);
      } else {
        thread = { id: threadId };
      }

      const runs = await this.openAi.beta.threads.runs.list(threadId);
      const activeRun = runs.data.find(
        (run) => run.status === 'in_progress' || run.status === 'queued',
      );

      if (activeRun) {
        await this.waitForRunCompletion(threadId, activeRun.id);
      }

      // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const prepared = await this.prepareImage(image);
      const fileObj = await toFile(prepared, 'image.png');
      const file = await this.openAi.files.create({
        file: fileObj,
        purpose: 'assistants',
      });

      await this.openAi.beta.threads.messages.create(thread.id, {
        role: 'user',
        content: [
          { type: 'text', text: content },
          { type: 'image_file', image_file: { file_id: file.id } },
        ],
      });

      const response = await this.openAi.beta.threads.runs.createAndPoll(
        thread.id,
        {
          assistant_id: assistantId,
        },
      );
      if (response.status === 'completed') {
        const messages = await this.openAi.beta.threads.messages.list(
          response.thread_id,
        );
        const assistantMessage = messages.data[0];
        if (assistantMessage.content[0].type == 'text') {
          const answer: TextContentBlock = assistantMessage.content[0];
          return answer.text.value;
        }
      }
      return 'ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π', error);
      return 'ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    }
  }
}
